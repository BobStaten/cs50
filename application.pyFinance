# implements cs50 problem "Finance"
from cs50 import SQL
from flask import Flask, flash, redirect, render_template, request, session, url_for
from flask_session import Session
from passlib.apps import custom_app_context as pwd_context
from tempfile import mkdtemp
import time

from helpers import *

# configure application
app = Flask(__name__)

# ensure responses aren't cached
if app.config["DEBUG"]:
    @app.after_request
    def after_request(response):
        response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
        response.headers["Expires"] = 0
        response.headers["Pragma"] = "no-cache"
        return response

# custom filter
app.jinja_env.filters["usd"] = usd

# configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

@app.route("/")
@login_required
def index():
    #Query database
    portfolio_symbols = db.execute("SELECT symbol, shares FROM portfolio WHERE id=:id", id=session["user_id"])

    #temp variable
    total_cash=0
    name=0

    #Define new values
    for portfolio_symbol in portfolio_symbols:
        symbol = portfolio_symbol["symbol"]
        shares = portfolio_symbol["shares"]
        stock = lookup(symbol)
        total = shares * stock["price"]
        total_cash += total

        #Update price and total
        db.execute("UPDATE portfolio SET price=:price, total=:total WHERE id=:id AND symbol=:symbol", \
        price=usd(stock["price"]), total=usd(total), id=session["user_id"], symbol=symbol)

    #Update cash in database
    updated_cash = db.execute("SELECT cash FROM users WHERE id=:id", id=session["user_id"])

    #Update total cash
    total_cash += updated_cash[0]["cash"]

    #Send updates to index.html
    updated_portfolio = db.execute("SELECT * FROM portfolio WHERE id=:id", id=session["user_id"])

    return render_template("index.html", stocks=updated_portfolio, cash=usd(updated_cash[0]["cash"]),\
    total=usd(total_cash))


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock."""
    if request.method == "GET":
        return render_template("buy.html")
    else:
        ## check that stock exists
        stock = lookup(request.form.get("symbol"))
        if not stock:
            return apology("Invalid Symbol")

        # check that form is filled out
        shares = (request.form.get("shares"))
        try:
            if not shares:
                return apology("Please select shares")
        except:
            return apology ("Must select shares")

        # check that some number of shares was selected
        shares = int(request.form.get("shares"))
        if shares <= 0:
            return apology("Please enter number of shares")

        # check available cash
        cash_avail = db.execute("SELECT cash FROM users WHERE id = :id" , \
                                id=session["user_id"])

        if not cash_avail or float(cash_avail[0] ["cash"]) < stock["price"] * shares:
            return apology("Insufficient funds")

        #update history
        db.execute("INSERT INTO histories (symbol, shares, price, id) \
        VALUES (:symbol, :shares, :price, :id)", \
        symbol=stock["symbol"], shares=shares, price=usd(stock["price"]), id=session["user_id"])



        #update user's cash
        db.execute("UPDATE users SET cash = cash - :cost WHERE id = :id", \
        id = session["user_id"], cost = (shares * stock["price"]))


        #check if user alreadys owns this stock
        user_shares = db.execute("SELECT shares FROM portfolio WHERE id=:id AND symbol=:symbol", \
        id=session["user_id"], symbol=stock["symbol"])
        if not user_shares:
            db.execute("INSERT INTO portfolio (name, shares, price, symbol, id)\
            VALUES(:name, :shares, :price, :symbol, :id)", \
            name = stock["name"], shares=shares, price=usd(stock["price"]), \
            symbol = stock["symbol"], id=session["user_id"])


        # if already owned, update shares
        else:
            shares_total = user_shares[0]["shares"] + shares
            db.execute("UPDATE portfolio SET shares=:shares WHERE id=:id AND symbol=:symbol", \
            shares=shares_total, id=session["user_id"], symbol=stock["symbol"])


        return redirect(url_for("index"))


@app.route("/history")
@login_required
def history():
    """Show history of transactions."""
    histories = db.execute("SELECT * FROM histories WHERE id=:id", id=session["user_id"])
    return render_template("history.html", histories=histories)
    return apology("No History")

@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in."""

    # forget any user_id
    session.clear()

    # if user reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username")

        # ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password")

        # query database for username
        rows = db.execute("SELECT * FROM users WHERE username = :username", username=request.form.get("username"))

        # ensure username exists and password is correct
        if len(rows) != 1 or not pwd_context.verify(request.form.get("password"), rows[0]["hash"]):
            return apology("invalid usernameand/or password")

            # remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # change password
        new_pwd = request.form.get("change_password")
        if new_pwd:
            if new_pwd == request.form.get("password"):
                return apology("You entered your current password.")
            else:
                 # update database
                result = db.execute("UPDATE users SET hash=:hash WHERE id=:id", \
                hash = pwd_context.hash(request.form.get("change_password")),\
                id=session["user_id"])

                if not result:
                    return apology("that didn't work")


        # remember which user has logged in
        #session["user_id"] = rows[0]["id"]

        # redirect user to home page
        return redirect(url_for("index"))

    # else if user reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")

@app.route("/logout")
def logout():
    """Log user out."""

    # forget any user_id
    session.clear()

    # redirect user to login form
    return redirect(url_for("login"))

@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():

    if request.method=="POST":
        rows = lookup(request.form.get("symbol"))

        if not rows:
            return apology("Invalid Symbol")

        return render_template("quoted.html", stock=rows)

    else:
        return render_template("quote.html")

@app.route("/register", methods=["GET","POST"])
def register():
    """Register new user."""

    # if user reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username")

        # ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password")

        # make sure password matches confirmpassword
        if request.form.get("password") != request.form.get("confirmation"):
            return apology ("Password does not match Confirmation")


        # add user to database
        result = db.execute("INSERT INTO users(username, hash)\
        VALUES(:username, :hash)", \
        username = request.form.get("username"),\
        hash = pwd_context.hash(request.form.get("password")))

        if not result:
            return apology("You are already registered.")

        # automatic login
        session["user_id"]= result

        return redirect(url_for("index"))

    # else if user reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("register.html")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():

    """Sell shares of stock."""
    if request.method == "GET":
        return render_template("sell.html")
    else:
        ## check that stock exists
        stock = lookup(request.form.get("symbol"))
        if not stock:
            return apology("Invalid Symbol")

        # check that form is filled out
        shares = (request.form.get("shares"))
        try:
            if not shares:
                return apology("Please select shares")
        except:
            return apology ("Must select shares")

        # check that some number of shares was selected
        shares = int(request.form.get("shares"))
        if shares <= 0:
            return apology("Please enter number of shares")

        #update histories
        db.execute("INSERT INTO histories (symbol, shares, price, id) \
        VALUES (:symbol, :shares, :price, :id)", \
        symbol=stock["symbol"], shares= -1 * shares, price=usd(stock["price"]), id=session["user_id"])


        #update user's cash
        db.execute("UPDATE users SET cash = cash + :sale WHERE id = :id", \
        id = session["user_id"], sale = (shares * stock["price"]))


        #check if user alreadys owns this stock
        user_shares = db.execute("SELECT shares FROM portfolio WHERE id=:id AND symbol=:symbol", \
        id=session["user_id"], symbol=stock["symbol"])

        if not user_shares:
            return apology("You don't own this stock.")
        elif user_shares[0]["shares"] < shares:
            return apology("Not enough shares.")
        # if already owned, update shares
        else:
            shares_total = user_shares[0]["shares"] - shares
            db.execute("UPDATE portfolio SET shares=:shares WHERE id=:id AND symbol=:symbol", \
            shares=shares_total, id=session["user_id"], symbol=stock["symbol"])


        return redirect(url_for("index"))

    return apology("No Sell")
